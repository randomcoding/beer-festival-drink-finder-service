/**
 *
 */
package uk.co.randomcoding.drinkfinder.snippet

import net.liftweb.http.js.JsCmds._
import net.liftweb.common._
import net.liftweb.http._
import net.liftweb.http.js._
import net.liftweb._
import net.liftweb.util.Helpers._
import uk.co.randomcoding.drinkfinder.model.matcher.id._
import uk.co.randomcoding.drinkfinder.model.datatemplate.DataTemplates
import scala.xml.NodeSeq
import net.liftweb.util.CssSel

/**
 * Snippet code to handle the display of the search form.
 *
 * This takes the form parameters and generates a redirection to the results page with the query parameters to display the results of the search.
 * @author RandomCoder
 *
 */
object UploadData extends Logger {

	/**
	 * Binding to display the upload form controls and process the actual upload of the file
	 */
	def showForm = {
		val availableTemplates = DataTemplates.templatesMap
		object uploadFile extends RequestVar[Box[FileParamHolder]](Empty)

		def process() : JsCmd = {
			Thread.sleep(500) // allow time to show ajax spinner
			var valid = true

			val fileParam = uploadFile.get match {
				case Full(f) => f
				case _ => S.redirectTo("uploadcompleted?status=error&description=Failed to retrieve uploaded file data")
			}

			S.redirectTo("uploadcompleted?status=success&filename=" + fileParam.fileName)
		}

		var selectedTemplate = ""

		// bind form to vars and create display
		"#availableTemplates" #> (SHtml.select(availableTemplates.toSeq, Box("--- Select Template ---"), selectedTemplate = _)) &
			"#uploadButton" #> (SHtml.fileUpload((ul => uploadFile(Full(ul))))) &
			"type=submit" #> (SHtml.onSubmitUnit(process))
	}

	/**
	 * Method called to process a completed upload.
	 * 
	 * This checks the value of the '''status''' query parameter 
	 * and will display a message if it is present or an error if it is not.
	 */
	def uploadCompleted = {
		val status = S.param("status")
	
		status match {
			case Full(st) => generateStatusMessage(st)
			case _ => generateUploadMessage("Error - No status parameter")
		}
	}
	
	/**
	 * Generates the status message based on the status parameter provided.
	 * 
	 * This assumes that the status messages will be properly formed. As they are generated by
	 * the [[#showForm]] method this should be easy to keep to.
	 */
	private def generateStatusMessage(status: String) : CssSel = {
		status match {
					case "error" => {
						val errorReason = S.param("description").get
						generateUploadMessage("Error: %s".format(errorReason))
					}
					case "success" => {
						val uploadedFile = S.param("filename").get
						generateUploadMessage("Success: File %s uploaded and data store updated.".format(uploadedFile))
					}
					case unknownStatus => generateUploadMessage("Error - Unrecognised Status: " + unknownStatus)
				}
	}
	
	/**
	 * Helper function to display an error message on the page
	 * @param formId The id of the element to display the error within
	 * @param errorMessage The text to be displayed
	 */
	private def displayError(formId : String, errorMessage : String) = S.error(formId, errorMessage)

	/**
	 * Helper function to generate a [[net.liftweb.util.CssSel]] for the '''''#uploadMessage''''' element in the page
	 * @param message The message to be displayed
	 */
	private val generateUploadMessage = ((message: String) => "#uploadMessage" #> message)
}