/**
 * Copyright (C) 2012 RandomCoder <randomcoder@randomcoding.co.uk>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contributors:
 *    RandomCoder - initial API and implementation and/or initial documentation
 */
package uk.co.randomcoding.drinkfinder.snippet

import net.liftweb.common._
import net.liftweb.http._
import net.liftweb.http.js._
import net.liftweb.util.CssSel
import net.liftweb.util.Helpers._
import scala.io.Source
import uk.co.randomcoding.drinkfinder.lib.dataloader.SpreadsheetDataLoader
import uk.co.randomcoding.drinkfinder.lib.dataloader.template.DrinkDataTemplate
import uk.co.randomcoding.drinkfinder.model.datatemplate.DataTemplates

/**
 * Snippet code to handle the display of the search form.
 *
 * This takes the form parameters and generates a redirection to the results page with the query parameters to display the results of the search.
 * @author RandomCoder
 *
 */
object UploadData extends Logger {

	/**
	 * Binding to display the upload form controls and process the actual upload of the file
	 */
	def showForm = {
		val availableTemplates = DataTemplates.templatesMap
		object uploadFile extends RequestVar[Box[FileParamHolder]](Empty)

		var selectedTemplate = ""

		def process() : JsCmd = {
			Thread.sleep(500) // allow time to show ajax spinner
			var valid = true

			val redirectTo = uploadFile.get match {
				case Full(f) => {
					val loader = new SpreadsheetDataLoader()
					val template = new DrinkDataTemplate(Source.fromInputStream(getClass.getResourceAsStream(selectedTemplate)))
					loader.loadData(f.fileStream, template)
					"uploadcompleted?status=success&filename=" + f.fileName
				}
				case _ => "uploadcompleted?status=error&description=Failed to retrieve uploaded file data"
			}

			S.redirectTo(redirectTo)
		}

		// bind form to vars and create display
		"#availableTemplates" #> (SHtml.select(availableTemplates.toSeq, Full("--- Select Template ---"), selectedTemplate = _)) &
			"#uploadButton" #> (SHtml.fileUpload((ul => uploadFile(Full(ul))))) &
			"type=submit" #> (SHtml.onSubmitUnit(process))
	}

	/**
	 * Method called to process a completed upload.
	 *
	 * This checks the value of the '''status''' query parameter
	 * and will display a message if it is present or an error if it is not.
	 */
	def uploadCompleted = {
		val status = S.param("status")

		status match {
			case Full(st) => generateStatusMessage(st)
			case _ => generateUploadMessage("Error - No status parameter")
		}
	}

	/**
	 * Generates the status message based on the status parameter provided.
	 *
	 * This assumes that the status messages will be properly formed. As they are generated by
	 * the [[#showForm]] method this should be easy to keep to.
	 */
	private def generateStatusMessage(status : String) : CssSel = {
		status match {
			case "error" => {
				val errorReason = S.param("description").get
				generateUploadMessage("Error: %s".format(errorReason))
			}
			case "success" => {
				val uploadedFile = S.param("filename").get
				generateUploadMessage("Success: File %s uploaded and data store updated.".format(uploadedFile))
			}
			case unknownStatus => generateUploadMessage("Error - Unrecognised Status: " + unknownStatus)
		}
	}

	/**
	 * Helper function to display an error message on the page
	 * @param formId The id of the element to display the error within
	 * @param errorMessage The text to be displayed
	 */
	private def displayError(formId : String, errorMessage : String) {
    S.error(formId, errorMessage)
  }

	/**
	 * Helper function to generate a [[net.liftweb.util.CssSel]] for the '''''#uploadMessage''''' element in the page
	 */
	private val generateUploadMessage = ((message : String) => "#uploadMessage" #> message)
}
